{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8c165fba.chunk.js","sourcesContent":["import React from 'react';\n\n// const Card = (props) => {\n// \treturn (\n// \t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n// \t\t\t<img alt='robot' src={`https://robohash.org/${props.id}?200*200`}/>\n// \t\t\t<div>\n// \t\t\t\t<h2>{props.name}</h2>\n// \t\t\t\t<p>{props.email}</p>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?200*200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name}\n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' placeholder='search robots'\n\t\t\tonChange={searchChange}/>\n\t\t</div>\n\t);\n}\n\n//onChange is a html syntax\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border:'1px dash white', height:'600px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React from 'react';\n// import {robots} from './robots';   换成接入API的形式\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\nimport { connect } from 'react-redux';\n\nimport { setSearchField, requestRobots } from '../actions';\n\n\n\n//what state I need to listen to and send down as props\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,  //！！！因为有两个reducer，所以中间加reducer的名字\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t};\n}\n// what props I should listen to that are actions need to ger dispatched \nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t};\n}\n\n\n/**\n* and because \"App\" owns the state, any component that has \"state\" uses the \"class\" syntax, so they can use the constructor function to\n* create \"this.state\", and \"state\" is what describes the app\n*/\n\n\n\nclass App extends React.Component {\n\n\t//state 相当于一个头部沟通器，通过constructor创建内容来沟通各个子component\n\t// constructor() {\n\t// \tsuper()\n\t// \tthis.state = {\n\t// \t\trobots: [],\n\t// \t\t// searchfield: ''\n\t// \t}\n\t// }\n\n\n\tcomponentDidMount() {\n\t\t// fetch('http://jsonplaceholder.typicode.com/users')\n\t\t// \t.then(response => response.json())\n\t\t// \t.then(users => this.setState({ robots: users}));\n\t\tthis.props.onRequestRobots();\n\t}\n\n\n\n\t// //define a parent function for communication (use => in React when creating methods)\n\t// onSearchChange = (event) => {\n\t// \tthis.setState({searchfield: event.target.value}) //event指实际输入的内容，setstate对state内容进行实时变更\n\t// }\n\n\n\trender() {\n\t\t// const { robots } = this.state;\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\t//筛选所有的robots.name里，是否include 输入的内容\n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\n\n\t\t//loading bar\n\t\treturn isPending ?\n\t\t\t<h1>loading</h1> :\n\t\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'>robofriends</h1>\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t\t<Scroll>  \n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t\t//将SearchBox里的input变成APP里的onSearchChange function，这样就和parent联系起来\n\t\t\t)\n\t}\n}\n\n\n\n\n// const App = () => {\n// \treturn (\n// \t\t<div className='tc'>\n// \t\t\t<h1>RoboFriends</h1>\n// \t\t\t<SearchBox />\t\n// \t\t\t<CardList robots={robots}/>\n// \t\t</div>\n\n// \t);\n// }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD,\n\t\t REQUEST_ROBOTS_PENDING,\n\t\t REQUEST_ROBOTS_SUCCESS,\n\t\t REQUEST_ROBOTS_FAILED } from './constants.js'\n\n\nexport const setSearchField = (text) => {\n\treturn (\n\t\t{\n\t\t\ttype: CHANGE_SEARCH_FIELD,\n\t\t\tpayload: text\n\t\t}\n\t)\n}\n\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('http://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error =>dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n// 3 states\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// THE FUNCTION THAT READS THE ACTION AND SPITS OUT STATE\n\nimport { CHANGE_SEARCH_FIELD,\n\t\t REQUEST_ROBOTS_PENDING,\n\t\t REQUEST_ROBOTS_SUCCESS,\n\t\t REQUEST_ROBOTS_FAILED } from './constants.js'\n\n\n// 1ST REDUCER\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n} \n\n\n// 2ND REDUCER\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true });\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false });\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending:false });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\t","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\n// import CardList from './CardList';\n// import {robots} from './robots'\n//robots export with no \"default\" so should add {} here\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\n\nimport { createLogger } from 'redux-logger';\n\nimport thunkMiddleware from 'redux-thunk';\n\n\n\n\n// ReactDOM.render(\n// \t<div>\n// \t\t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n// \t\t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n// \t\t<Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n// \t\t<Card id={robots[3].id} name={robots[3].name} email={robots[3].email}/>\n// \t</div>,\n// \tdocument.getElementById('root'));\n// // here id, name, email represents input variables\n\n\n\n// ReactDOM.render(\n// \t<CardList robots={robots}/>, document.getElementById('root'));\n// //左边robots为 CardList.js里公式的input变量，右边的robots是源文件的数据，即上面import的内容。\n\n\nconst logger = createLogger();\n\n// 融合两个reducer\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\n// STORE: A BIG OBJECT THAT DESCRIBE THE STATE OF APP\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\n\n\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n//create main JS\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}